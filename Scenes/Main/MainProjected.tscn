[gd_scene load_steps=12 format=3 uid="uid://bcnvijird8sbv"]

[ext_resource type="Script" path="res://Scenes/Main/Main.gd" id="1_bwasb"]
[ext_resource type="PackedScene" uid="uid://crrst0nresde8" path="res://Scenes/ImageScanning/PictureScanner.tscn" id="2_jv0a8"]
[ext_resource type="Texture2D" uid="uid://uhh8hgr4fxf7" path="res://icon.png" id="4_dhc2k"]
[ext_resource type="Material" uid="uid://o3fxdac6dd4n" path="res://Assets/Materials/EmotionCircle/EmotionCircle.tres" id="5_po8nc"]
[ext_resource type="PackedScene" uid="uid://cjae233gd51en" path="res://Scenes/Visuals/PostIt/postit.tscn" id="6_hjirc"]
[ext_resource type="FontFile" path="res://Assets/Fonts/Roboto-Regular.tres" id="7_7phnx"]

[sub_resource type="Shader" id="1"]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable.mono's CanvasItemMaterial.

shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D noise;

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

void fragment() {
//	float n = texture(noise, SCREEN_UV*1.0+vec2(0,TIME*0.05)).r;
	float n = snoise(vec3(SCREEN_UV.x*10.0,SCREEN_UV.y*10.0,TIME*0.1))*0.05;
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV+vec2(n,n), 1.0f);
	
	COLOR = color;
}"

[sub_resource type="FastNoiseLite" id="3"]

[sub_resource type="NoiseTexture2D" id="4"]
seamless = true
noise = SubResource("3")

[sub_resource type="ShaderMaterial" id="2"]
shader = SubResource("1")
shader_parameter/noise = SubResource("4")

[sub_resource type="ViewportTexture" id="ViewportTexture_klpug"]
viewport_path = NodePath("SubViewport")

[node name="Main" type="Node2D"]
script = ExtResource("1_bwasb")

[node name="PictureScanner" parent="." instance=ExtResource("2_jv0a8")]

[node name="ColorRect" type="ColorRect" parent="."]
offset_left = -1375.0
offset_top = -1278.0
offset_right = 2550.0
offset_bottom = 2553.0
color = Color(0, 0, 0, 1)

[node name="SubViewport" type="SubViewport" parent="."]
size = Vector2i(1000, 1000)

[node name="ClearColor" type="ColorRect" parent="SubViewport"]
offset_right = 1000.0
offset_bottom = 1000.0

[node name="EmotionPixels" type="TextureRect" parent="SubViewport"]
texture_filter = 1
offset_right = 1000.0
offset_bottom = 1000.0
texture = ExtResource("4_dhc2k")

[node name="EmotionCircle" type="ColorRect" parent="SubViewport"]
visible = false
material = ExtResource("5_po8nc")
offset_right = 1000.0
offset_bottom = 1000.0

[node name="Distortion" type="ColorRect" parent="SubViewport"]
material = SubResource("2")
offset_right = 1000.0
offset_bottom = 1000.0

[node name="Postit" parent="SubViewport" instance=ExtResource("6_hjirc")]
visible = false
position = Vector2(500, 500)

[node name="Sprite2D" type="Sprite2D" parent="."]

[node name="Label" type="Label" parent="."]
offset_right = 709.0
offset_bottom = 29.0
scale = Vector2(0.5, 0.5)
theme_override_colors/font_color = Color(0, 0, 0, 1)
theme_override_fonts/font = ExtResource("7_7phnx")
text = "
3D-Image content provided @2023 Google,Images @Aerodata International Surveys, Mapdata @2023"

[node name="Image" type="Sprite2D" parent="."]
texture = SubResource("ViewportTexture_klpug")
centered = false
