[gd_scene load_steps=21 format=3 uid="uid://sxdtfapqi5gc"]

[ext_resource type="PackedScene" uid="uid://crrst0nresde8" path="res://Scenes/ImageScanning/PictureScanner.tscn" id="1"]
[ext_resource type="Script" path="res://Scenes/Main/Main.gd" id="2"]
[ext_resource type="ArrayMesh" uid="uid://wbtavmcmm12" path="res://Assets/Models/CityModelUnwrapped.obj" id="3_k6np6"]
[ext_resource type="Material" uid="uid://o3fxdac6dd4n" path="res://Assets/Materials/EmotionCircle/EmotionCircle.tres" id="3_l23ja"]
[ext_resource type="FontFile" path="res://Assets/Fonts/Roboto-Regular.tres" id="6_k6h2d"]

[sub_resource type="Shader" id="Shader_dkdln"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta11.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec3 circleOffset;
uniform float distanceMod = 1.0;

varying float alpha;
void vertex() {
	alpha = 1.0-min(distance(circleOffset, VERTEX)/distanceMod, 1.0);
//	alpha += snoise(VERTEX*20.0 + TIME*0.1)*0.05;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	
	ALPHA_SCISSOR_THRESHOLD = 0.5;
	ALPHA = alpha;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jkwq5"]
render_priority = 0
shader = SubResource("Shader_dkdln")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/circleOffset = Vector3(0.312, 0, 0)
shader_parameter/distanceMod = 6.581

[sub_resource type="Shader" id="Shader_wfr4f"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta11.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec3 circleOffset;
uniform float distanceMod = 1.0;

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

varying float alpha;
void vertex() {
	alpha = 1.0-min(distance(circleOffset, VERTEX)/distanceMod, 1.0);
	alpha += snoise(VERTEX*1.0 + TIME*0.1)*0.05;
//	alpha += snoise(VERTEX*20.0 + TIME*0.1)*0.05;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	
	ALPHA_SCISSOR_THRESHOLD = 0.5;
	ALPHA = alpha;
}
"

[sub_resource type="ViewportTexture" id="ViewportTexture_ntuxf"]
viewport_path = NodePath("SubViewport")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xowme"]
resource_local_to_scene = true
render_priority = 1
shader = SubResource("Shader_wfr4f")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/circleOffset = Vector3(0.312, 0, 0)
shader_parameter/distanceMod = 5.804
shader_parameter/texture_albedo = SubResource("ViewportTexture_ntuxf")

[sub_resource type="PhysicalSkyMaterial" id="PhysicalSkyMaterial_654oj"]
energy_multiplier = 2.0

[sub_resource type="Sky" id="Sky_lsepf"]
sky_material = SubResource("PhysicalSkyMaterial_654oj")

[sub_resource type="Environment" id="Environment_v4m12"]
background_mode = 1
background_color = Color(1, 1, 1, 1)
sky = SubResource("Sky_lsepf")
ambient_light_source = 2
ambient_light_color = Color(1, 1, 1, 1)
ambient_light_energy = 0.3

[sub_resource type="ViewportTexture" id="ViewportTexture_3vxne"]
viewport_path = NodePath("SubViewport")

[sub_resource type="ViewportTexture" id="ViewportTexture_6wvsh"]
viewport_path = NodePath("SubViewport")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_h03u6"]
emission_enabled = true
emission = Color(1, 1, 1, 1)

[sub_resource type="Shader" id="1"]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable.mono's CanvasItemMaterial.

shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D noise;

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_4(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289_4(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 2.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) { 
    vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
    vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
    
    // First corner
    vec3 i  = floor(v + dot(v, vec3(C.y)) );
    vec3 x0 = v - i + dot(i, vec3(C.x)) ;
    
    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );
    
    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + vec3(C.x);
    vec3 x2 = x0 - i2 + vec3(C.y); // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
    
    // Permutations
    i = mod289_3(i); 
    vec4 p = permute( permute( permute( 
    		 i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
    	   + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
    	   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
    
    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;
    
    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
    
    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
    
    vec4 x = x_ *ns.x + vec4(ns.y);
    vec4 y = y_ *ns.x + vec4(ns.y);
    vec4 h = 1.0 - abs(x) - abs(y);
    
    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );
    
    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));
    
    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
    
    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);
    
    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    
    // Mix final noise value
    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
    m = m * m;
    return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

void fragment() {
//	float n = texture(noise, SCREEN_UV*1.0+vec2(0,TIME*0.05)).r;
	float n = snoise(vec3(SCREEN_UV.x*10.0,SCREEN_UV.y*10.0,TIME*0.2))*0.2;
	vec4 color = textureLod(SCREEN_TEXTURE, SCREEN_UV+vec2(n,n), 4.0f);
	
	COLOR = color;
}"

[sub_resource type="FastNoiseLite" id="3"]

[sub_resource type="NoiseTexture2D" id="4"]
seamless = true
noise = SubResource("3")

[sub_resource type="ShaderMaterial" id="2"]
shader = SubResource("1")
shader_parameter/noise = SubResource("4")

[node name="Main" type="Node2D"]
script = ExtResource("2")

[node name="PictureScanner" parent="." instance=ExtResource("1")]

[node name="Node3D" type="Node3D" parent="."]

[node name="CityUnwrapped2" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.395269, -9.53674e-07, -0.00941402)
material_override = SubResource("ShaderMaterial_jkwq5")
mesh = ExtResource("3_k6np6")
skeleton = NodePath("../..")

[node name="CityUnwrapped" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.395269, -9.53674e-07, -0.00941402)
material_override = SubResource("ShaderMaterial_xowme")
mesh = ExtResource("3_k6np6")
skeleton = NodePath("../..")

[node name="WorldEnvironment" type="WorldEnvironment" parent="Node3D"]
environment = SubResource("Environment_v4m12")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Node3D"]
transform = Transform3D(0.830508, 0.429286, -0.354922, 0, 0.637195, 0.770702, 0.557006, -0.640075, 0.529196, -2.38419e-07, 1.27877, 1.7312)
visible = false

[node name="Decal" type="Decal" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.579343, 0)
visible = false
extents = Vector3(4, 2, 4)
texture_albedo = SubResource("ViewportTexture_3vxne")
texture_emission = SubResource("ViewportTexture_6wvsh")
emission_energy = 0.0

[node name="CameraAnchor" type="Node3D" parent="Node3D"]
transform = Transform3D(0.699663, 0, -0.714473, 0, 1, 0, 0.714473, 0, 0.699663, 0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="Node3D/CameraAnchor"]
transform = Transform3D(1, 0, 0, 0, 0.703395, 0.710799, 0, -0.710799, 0.703395, 0, 4.014, 4.563)
fov = 64.3
size = 5.424

[node name="SpotLight3D" type="SpotLight3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, -5.96046e-08, 1, 0, -1, -5.96046e-08, -0.0396783, 3.5932, 0)
light_energy = 17.268
shadow_enabled = true
spot_range = 8.99666
spot_angle = 60.6146

[node name="SpotLight3D2" type="SpotLight3D" parent="Node3D"]
transform = Transform3D(0.511623, -5.12129e-08, 0.85921, -0.85921, -3.04951e-08, 0.511623, 0, -1, -5.96046e-08, 2.49572, 2.38864, 0)
spot_range = 4.5238
spot_angle = 41.2484

[node name="SpotLight3D3" type="SpotLight3D" parent="Node3D"]
transform = Transform3D(-0.511623, 1.38636e-07, -0.85921, -0.85921, -3.04951e-08, 0.511623, 4.47275e-08, 1, 1.34719e-07, -2.50428, 2.38864, 0)
spot_range = 4.5238
spot_angle = 41.2484

[node name="CSGCombiner3D" type="CSGCombiner3D" parent="Node3D"]

[node name="CSGBox3D" type="CSGBox3D" parent="Node3D/CSGCombiner3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.518069, 0)
size = Vector3(37.2006, 1, 34.047)
material = SubResource("StandardMaterial3D_h03u6")

[node name="CSGCylinder3D" type="CSGCylinder3D" parent="Node3D/CSGCombiner3D"]
operation = 2
radius = 3.22053
sides = 64

[node name="SubViewport" type="SubViewport" parent="."]
disable_3d = true
handle_input_locally = false
size = Vector2i(1000, 1000)
size_2d_override = Vector2i(1000, 1000)
render_target_update_mode = 4

[node name="EmotionCircle" type="ColorRect" parent="SubViewport"]
material = ExtResource("3_l23ja")
offset_right = 1000.0
offset_bottom = 1000.0

[node name="Distortion" type="ColorRect" parent="SubViewport"]
material = SubResource("2")
offset_right = 1000.0
offset_bottom = 1000.0

[node name="Sprite2D" type="Sprite2D" parent="."]

[node name="Label" type="Label" parent="."]
offset_right = 709.0
offset_bottom = 29.0
scale = Vector2(0.5, 0.5)
theme_override_colors/font_color = Color(0, 0, 0, 1)
theme_override_fonts/font = ExtResource("6_k6h2d")
text = "
3D-Image content provided @2023 Google,Images @Aerodata International Surveys, Mapdata @2023"
